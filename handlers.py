from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from database import add_channel, get_user_channels
from telethon import TelegramClient
import logging
import os

logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("api_id")
API_HASH = os.getenv("api_hash")
BOT_TOKEN = os.getenv("bot_token")
client = TelegramClient('bot_session', API_ID, API_HASH)

async def fetch_messages_from_channels(user_channels):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–∞–∫ –±–æ—Ç–∞
        await client.start(bot_token=BOT_TOKEN)
        all_messages = []
        for channel in user_channels:
            messages = []
            async for message in client.iter_messages(channel, limit=5):  # 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if message.text:
                    messages.append(f"üì® {message.text}")
            if messages:
                all_messages.append(f"–ö–∞–Ω–∞–ª: {channel}\n" + "\n\n".join(messages))
        return all_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."]
    finally:
        await client.disconnect()

def register_handlers(dp: Dispatcher):
    @dp.message(Command("start"))
    async def send_welcome(message: types.Message):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start.")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
                [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")],
            ],
            resize_keyboard=True
        )
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=keyboard)

    @dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
    async def select_channel(message: types.Message):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, @news_channel).")

    @dp.message(lambda message: message.text.startswith('@'))
    async def add_channel_handler(message: types.Message):
        user_id = message.from_user.id
        channel = message.text.strip()
        if add_channel(user_id, channel):
            logger.info(f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            logger.warning(f"–ö–∞–Ω–∞–ª {channel} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")

    @dp.message(lambda message: message.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
    async def show_channels(message: types.Message):
        user_id = message.from_user.id
        channels = get_user_channels(user_id)
        if channels:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã.")
            channel_list = "\n".join(channels)
            await message.answer(f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{channel_list}")
        else:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

    @dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")
    async def get_digest(message: types.Message):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–π–¥–∂–µ—Å—Ç.")
        user_id = message.from_user.id
        channels = get_user_channels(user_id)

        if not channels:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            return

        messages = await fetch_messages_from_channels(channels)
        if messages:
            for msg in messages:
                await message.answer(msg)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.")
